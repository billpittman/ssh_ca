name: Sign SSH Certificates

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  sign-certificates:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup SSH CA keys
      run: |
        echo "${{ secrets.SSH_HOST_CA }}" > ssh_host_ca
        chmod 600 ssh_host_ca
        echo "${{ secrets.SSH_USER_CA }}" > ssh_user_ca
        chmod 600 ssh_user_ca

    - name: Sign user and host keys if certs are missing
      run: |
          validate_cert() {
            cert_file="$1"
            ca_key="$2"

            # If the certificate already exists, get its info for additional checking
            existing_cert_info=$(ssh-keygen -L -f "$cert_file" 2>/dev/null)

            # Check if the certificate is signed by the expected CA
            # Signing CA: ED25519 SHA256:25f83Df2EIFp6yA7PtQzVtFVd0yPcvbZaCDvVo5OHRo (using ssh-ed25519)
            cert_fingerprint=$(echo "$existing_cert_info" | grep "Signing CA" | awk '{print $4}')
            ca_fingerprint=$(ssh-keygen -E sha256 -lf "$ca_key" | awk '{print $2}')
            if [[ "$cert_fingerprint" != "$ca_fingerprint" ]]; then
              echo "Certificate $cert_file is not signed by the expected CA ($cert_fingerprint != $ca_fingerprint)."
              return 1
            fi

            # Check certificate expiration/active dates
            # Valid: from 2025-07-16T07:29:00 to 2025-10-14T07:30:31
            start_date_str=$(echo "$existing_cert_info" | grep "Valid:" | awk '{print $3}')
            expire_date_str=$(echo "$existing_cert_info" | grep "Valid:" | awk '{print $5}')

            # Convert dates to seconds since epoch for comparison
            start_date=$(date -d "$start_date_str" +"%s")
            expire_date=$(date -d "$expire_date_str" +"%s")
            current_date=$(date -u +"%s")

            # Check if the certificate is expired
            if [[ $current_date -lt $start_date || $current_date -gt $expire_date ]] ; then
              echo "Certificate $cert_file is expired or not yet valid."
              return 1;
            fi

            # Check if the certificate is due to exipire in the next 30 days
            # 30 days = 2592000 seconds (30 * 24 * 60 * 60)
            if [[ $expire_date -lt $((current_date + 2592000)) ]]; then
              echo "Certificate $cert_file is due to expire in the next 30 days. (re-signing)"
              return 1
            fi

            return 0
          }

          sign_key() {
            local pubkey="$1"
            local ca_key="$2"
            local cert_dir="$3"
            local principal="$4"
            local sign_flags="$5"

            local pub_filename=$(basename "$pubkey" .pub)
            local cert_file="${cert_dir}/${pub_filename}-cert.pub"

            mkdir -p "$cert_dir"

            if [[ -f "$cert_file" ]]; then
              if validate_cert "$cert_file" "$ca_key"; then
                echo "Skipping $pubkey: valid cert already exists at $cert_file"
                return
              fi
            fi

            echo "Signing $pub_filename using $ca_key..."

            ssh-keygen -s "$ca_key" \
              $sign_flags \
              -I "$principal" \
              -V +90d \
              "$pubkey"

            mv "${pubkey%.*}-cert.pub" "$cert_file"
            echo "Generated cert: $cert_file"
          }

          # Process user keys
          find requests/user/ -type f -name '*.pub' | while read pubkey; do
            user_dir=$(dirname "$pubkey")
            username=$(basename "$user_dir")
            cert_dir="certs/user/$username"
            principal="$username"
            sign_flags="-n bill"

            sign_key "$pubkey" "ssh_user_ca" "$cert_dir" "$principal" "$sign_flags"
          done

          # Process host keys
          find requests/host/ -type f -name '*.pub' | while read pubkey; do
            host_dir=$(dirname "$pubkey")
            hostname=$(basename "$host_dir")
            cert_dir="certs/host/$hostname"
            principal="$hostname"
            sign_flags="-h"

            sign_key "$pubkey" "ssh_host_ca" "$cert_dir" "$principal" "$sign_flags"
          done

    - name: Cleanup SSH CA keys
      run: |
        rm -f ssh_host_ca
        rm -f ssh_user_ca

    - name: Commit signed certificates
      run: |
        git config user.name "SSH certbot"
        git config user.email "certbot@justplainbill.com"
        git add certs/
        git commit -m "Signed SSH certificates (certbot)" || echo "No changes to commit"
        git push

